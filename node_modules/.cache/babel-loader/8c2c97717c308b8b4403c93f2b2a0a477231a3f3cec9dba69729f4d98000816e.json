{"ast":null,"code":"// Dados simulados de usuários\nexport const users = [{\n  id: 1,\n  name: \"Admin\",\n  email: \"admin@sysgym.com\",\n  password: \"admin123\",\n  role: \"admin\",\n  createdAt: \"2023-01-01T00:00:00.000Z\"\n}, {\n  id: 2,\n  name: \"Treinador Silva\",\n  email: \"treinador@sysgym.com\",\n  password: \"treinador123\",\n  role: \"treinador\",\n  createdAt: \"2023-01-02T00:00:00.000Z\"\n}, {\n  id: 3,\n  name: \"Atendente Santos\",\n  email: \"atendente@sysgym.com\",\n  password: \"atendente123\",\n  role: \"atendente\",\n  createdAt: \"2023-01-03T00:00:00.000Z\"\n}];\n\n// Funções auxiliares para manipulação de usuários\nexport const findUserByEmail = email => {\n  return users.find(user => user.email === email);\n};\nexport const authenticateUser = (email, password) => {\n  const user = findUserByEmail(email);\n  if (user && user.password === password) {\n    const {\n      password,\n      ...userWithoutPassword\n    } = user;\n    return userWithoutPassword;\n  }\n  return null;\n};\n\n// Funções para gerenciamento de usuários (em uma aplicação real, estas\n// seriam chamadas para API)\nexport const getAllUsers = () => {\n  return users.map(({\n    password,\n    ...user\n  }) => user);\n};\nexport const getUserById = id => {\n  const user = users.find(user => user.id === id);\n  if (user) {\n    const {\n      password,\n      ...userWithoutPassword\n    } = user;\n    return userWithoutPassword;\n  }\n  return null;\n};\n\n// Em uma aplicação real, isso seria persistido em um banco de dados\nexport const addUser = user => {\n  const newId = Math.max(...users.map(u => u.id)) + 1;\n  const newUser = {\n    id: newId,\n    ...user,\n    createdAt: new Date().toISOString()\n  };\n  users.push(newUser);\n  return newUser;\n};","map":{"version":3,"names":["users","id","name","email","password","role","createdAt","findUserByEmail","find","user","authenticateUser","userWithoutPassword","getAllUsers","map","getUserById","addUser","newId","Math","max","u","newUser","Date","toISOString","push"],"sources":["/home/gberny/Documents/Berny/Projetos/v0-sysgym/src/data/users.js"],"sourcesContent":["// Dados simulados de usuários\nexport const users = [\n  {\n    id: 1,\n    name: \"Admin\",\n    email: \"admin@sysgym.com\",\n    password: \"admin123\",\n    role: \"admin\",\n    createdAt: \"2023-01-01T00:00:00.000Z\",\n  },\n  {\n    id: 2,\n    name: \"Treinador Silva\",\n    email: \"treinador@sysgym.com\",\n    password: \"treinador123\",\n    role: \"treinador\",\n    createdAt: \"2023-01-02T00:00:00.000Z\",\n  },\n  {\n    id: 3,\n    name: \"Atendente Santos\",\n    email: \"atendente@sysgym.com\",\n    password: \"atendente123\",\n    role: \"atendente\",\n    createdAt: \"2023-01-03T00:00:00.000Z\",\n  },\n];\n\n// Funções auxiliares para manipulação de usuários\nexport const findUserByEmail = (email) => {\n  return users.find((user) => user.email === email);\n};\n\nexport const authenticateUser = (email, password) => {\n  const user = findUserByEmail(email);\n  if (user && user.password === password) {\n    const { password, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  }\n  return null;\n};\n\n// Funções para gerenciamento de usuários (em uma aplicação real, estas\n// seriam chamadas para API)\nexport const getAllUsers = () => {\n  return users.map(({ password, ...user }) => user);\n};\n\nexport const getUserById = (id) => {\n  const user = users.find((user) => user.id === id);\n  if (user) {\n    const { password, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  }\n  return null;\n};\n\n// Em uma aplicação real, isso seria persistido em um banco de dados\nexport const addUser = (user) => {\n  const newId = Math.max(...users.map((u) => u.id)) + 1;\n  const newUser = {\n    id: newId,\n    ...user,\n    createdAt: new Date().toISOString(),\n  };\n  users.push(newUser);\n  return newUser;\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,KAAK,GAAG,CACnB;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,kBAAkB;EACzBC,QAAQ,EAAE,UAAU;EACpBC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAE;AACb,CAAC,EACD;EACEL,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,iBAAiB;EACvBC,KAAK,EAAE,sBAAsB;EAC7BC,QAAQ,EAAE,cAAc;EACxBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAE;AACb,CAAC,EACD;EACEL,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE,sBAAsB;EAC7BC,QAAQ,EAAE,cAAc;EACxBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAE;AACb,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,eAAe,GAAIJ,KAAK,IAAK;EACxC,OAAOH,KAAK,CAACQ,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACN,KAAK,KAAKA,KAAK,CAAC;AACnD,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAGA,CAACP,KAAK,EAAEC,QAAQ,KAAK;EACnD,MAAMK,IAAI,GAAGF,eAAe,CAACJ,KAAK,CAAC;EACnC,IAAIM,IAAI,IAAIA,IAAI,CAACL,QAAQ,KAAKA,QAAQ,EAAE;IACtC,MAAM;MAAEA,QAAQ;MAAE,GAAGO;IAAoB,CAAC,GAAGF,IAAI;IACjD,OAAOE,mBAAmB;EAC5B;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC/B,OAAOZ,KAAK,CAACa,GAAG,CAAC,CAAC;IAAET,QAAQ;IAAE,GAAGK;EAAK,CAAC,KAAKA,IAAI,CAAC;AACnD,CAAC;AAED,OAAO,MAAMK,WAAW,GAAIb,EAAE,IAAK;EACjC,MAAMQ,IAAI,GAAGT,KAAK,CAACQ,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACR,EAAE,KAAKA,EAAE,CAAC;EACjD,IAAIQ,IAAI,EAAE;IACR,MAAM;MAAEL,QAAQ;MAAE,GAAGO;IAAoB,CAAC,GAAGF,IAAI;IACjD,OAAOE,mBAAmB;EAC5B;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMI,OAAO,GAAIN,IAAI,IAAK;EAC/B,MAAMO,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGlB,KAAK,CAACa,GAAG,CAAEM,CAAC,IAAKA,CAAC,CAAClB,EAAE,CAAC,CAAC,GAAG,CAAC;EACrD,MAAMmB,OAAO,GAAG;IACdnB,EAAE,EAAEe,KAAK;IACT,GAAGP,IAAI;IACPH,SAAS,EAAE,IAAIe,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;EACDtB,KAAK,CAACuB,IAAI,CAACH,OAAO,CAAC;EACnB,OAAOA,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}